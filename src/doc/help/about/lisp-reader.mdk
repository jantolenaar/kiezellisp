.index about:lisp-reader
.description

A lisp reader is an invisible wrapper around a `TextReader`. It consists of a
scanner and a parser. 

The scanner recognizes tokens such as parentheses, numbers,
strings and other character combinations that have a special meaning.

The parser creates S-expressions from the stream of tokens. Sometimes tokens are
converted to multiple tokens.

## Comments

The reader handles line comments and block comments

    123 ; line comment
    123 #! line comment
    (+ 123 #| block comment |# 456)

## Abbreviated lambda expressions

.examples
#(+ 2 %)
#(* %3 %3)
(it 1 2 3)

## Accessor functions

.examples
.
(. "to-upper")
.to-upper
(.to-upper "hello")

## Numbers

.examples
#9r13
#b111
#o77
#x20

## Strings

.examples
#q{a b c}
#q(a b c)
#q[a b c]
#q<a b c>
#q anything really           \
een                          \
twee                         \
drieanything really

## Regular expression literals

.examples
#/a(a)p/i
:d

## Backquote expressions

A backquote expression is a template for a piece of lisp code that must execute
to produce output. The names `bq:list`, `bq:force`, `bq:quote` and `bq:append`
are used to clarify the translation of the backquote expression. They behave as
their counterparts in the `lisp` package.

.examples
(quote `(a b c))
`(a b c)
(var b '(1 2 3))
(quote `(a ,b c))
`(a ,b c)
(quote `(a ,@b c))
`(a ,@b c)

## Immediate execution expressions

.examples
'(1 (+ 2 3) 4)
(setq $read-eval true)
'(1 #.(+ 2 3) 4)

## (Un)conditional inclusion or exclusion  of forms

The following examples show how to include or exclude a single form. The first
argument after `#+` and `#-` is a logical expression that refers to symbols in
the `$features` list. The second argument is the form to include or exclude.

.examples
$features
'(a #; b c)
'(a #ignore b c)
'(a #+x32 b c)
'(a #-x32 b c)
'(a #+bla b c)
'(a #-bla b c)
'(a #+(and x32 (not bla)) b c)

We can also include/exclude more than one (usually top-level) form:

.examples
'(#if unix 1 2 #elif windows 3 #else 4 5 #endif)

Please note that this feature is form-aware and not line-aware and that the
forms in the choosen branch are executed as a single top-level form.

## Structures

The `#s(...)` reader macro produces a prototype object as a literal. When the
number of items in the list is odd, the first item must be the type name of a
prototype which will become the parent of the constructed prototype.

.examples
#s(aap 1 noot 2)
(defstruct mies aap (noot 4) (teun 5))
#s(mies aap 1 noot 2)
(type? it 'mies)
:throws
#s(mies2 aap 1 noot 2)

## Read tables

Kiezellisp readtables are similar to Common Lisp readtables.

## See also

.api
$readtable
set-macro-character set-dispatch-macro-character
read-char unread-char peek-char
read read-from-string read-all read-all-from-string read-delimited-list
with-input-from-string
$read-eval $features
